def doParallelDeploys(config , customer){
    return {
        
            stage("Deploy to UAT") {
                customer_file = "${customer}.json"
                customer_config = readJSON file : customer_file
                stage = "UAT"
                echo "Author Name is : ${customer_config[customer][stage]["Author"]} "
                echo "S3 Bucket URL is : ${customer_config[customer][stage]["S3_Bucket"]} " 
                echo "API Endpoint is : ${customer_config[customer][stage]["API"]} " 
                echo "Is Deployment HighAvailale ? : ${customer_config[customer][stage]["HA"]}"
                env.dep_prod = customer_config[customer]["Dep_Prod"]

            }
            if (env.dep_prod == '1') {
                stage("Deploy to Prod") {
                    customer_file = "${customer}.json"
                    customer_config = readJSON file : customer_file
                    input message : "Deploy to Prod ?" , ok : "Approve!"
                    stage = "Prod"
                    deploy_servers = customer_config[customer]["server_prod"]
                    parallel {
                    for(server in deploy_servers){
                        stage(server){
                                echo "value of param1 is : ${customer_config[customer][stage]["servers"][server]["param1"]}"
                        }
                    }
                    }
                }
            }
        
    }
}
  


node {

    stage("checkout SCM"){
        git branch: 'master', url: 'https://github.com/yashshuklahash/jenkins-test.git'
    }
    
    config = readJSON file: 'parameters.json' 

    stage('Build Stage'){
        echo "This is build stage"
        sh "sleep 5"   
    }

    stage('Customer Deploys') {
        customer_deploy = [:]
        customers = config.customers 
        for (customer in customers) {
            customer_deploy["${customer}"] =  doParallelDeploys(config, customer) 
        }
        
        parallel customer_deploy
    }

}


